# -*- coding: utf-8 -*-
"""SongRecommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i8ZsnJE9sLq9ivkJtWoyphC6_TR1RW8Q
"""

#Only use lines 10-31 for testing purposes
#The songRecommender function will provide songID, traits_dictionary, and num_recs as inputs

songID = '3nqQXoyQOWXiESFLlDF1hG'

traits_dictionary = {
    'popularity': [100],
    'explicit': [False],
    'danceability': [0.714],
    'energy': [0.472],
    'key': [2],
    'loudness':[-7.375],
    'mode':1,
    'speechiness':[0.0864],
    'acousticness': [0.013],
    'instrumentalness':[0.00000451],
    'liveness':[0.266],
    'valence':[0.238],
    'tempo':[131.121],
    'time_signature':[4]
}
num_recs = 3


def songRecommender(songID, traits_dictionary, num_recs):
  #necessary imports
  import pandas as pd
  import pickle

  #set up dataframe with traits
  traitsDF = pd.DataFrame(traits_dictionary)

  #convert num_recs to int
  num_recs = int(num_recs)


  #provide links to models for loading through iteration later
  links = ["genreModels/animeModel.h5", "genreModels/chillModel.h5","genreModels/emoModel.h5","genreModels/grungeModel.h5",
          "genreModels/indianModel.h5","genreModels/k-popModel.h5","genreModels/pop-filmModel.h5","genreModels/popModel.h5",
          "genreModels/sadModel.h5","genreModels/sertanejoModel.h5"]

  #list of the genre names in the same order as their models
  model_names=['anime', 'chill', 'emo', 'grunge', 'indian', 'k-pop',
            'pop', 'pop-film', 'sad', 'sertanejo']
  
  #blank dictionary to save models into
  models={}

  for i, name in enumerate(model_names):
  # Load the KNearestNeighbors model from the h5 file
    with open(links[i], 'rb') as file:
        Model = pickle.load(file)
    models[name]= Model

  #empty list to add predicted genres
  genre_filters = []

  #for each genre
  for name in models:
    #access the model from the models dict
    model = models[name]

    #make a prediction
    prediction = model.predict(traitsDF)

    #if classified as that genre, add it to the genre_filters list
    if prediction[0]:
      genre_filters.append(name)

  #load in the csv data
  songsDF = pd.read_csv('cleaned_data.csv')

  try:
    filtered_songsDF = songsDF[songsDF['track_genre'].isin(genre_filters)]
  except:
    filtered_songsDF = songsDF

  filtered_songsDF = filtered_songsDF.loc[filtered_songsDF['track_id']!=songID]
  recommendations = filtered_songsDF.sort_values(['popularity'], ascending=False)
  return recommendations[['track_name','artists']].head(num_recs)



